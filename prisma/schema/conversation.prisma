model Conversation {
  id             String    @id @default(cuid())
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  senderUserName String    @unique
  model          Model     @relation(fields: [modelUserName], references: [userName], onDelete: Cascade)
  modelUserName  String
  messages       Message[]

  @@index([modelUserName])
}

model Message {
  id                        String              @id @default(cuid())
  createdAt                 DateTime            @default(now())
  updatedAt                 DateTime            @updatedAt
  actualtSendTime           DateTime            @default(now())
  messageIndex              Int
  senderRole                Role
  type                      MessageType
  text                      String?
  pictureFromSender         PictureFromSender?  @relation(fields: [pictureFromSenderUrl], references: [url], onDelete: Cascade)
  pictureFromSenderUrl      String?
  pictureFromSenderKey      String?
  pictureFromModel          ModelSamplePicture? @relation(fields: [pictureFromModelUrl], references: [url], onDelete: Cascade)
  pictureFromModelUrl       String?
  pictureFromSenderAnalysis Json?
  conversation              Conversation        @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  conversationId            String

  @@index([pictureFromModelUrl])
  @@index([pictureFromSenderUrl])
  @@index([conversationId])
}

enum Role {
  user
  assistant
}

model PictureFromSender {
  id                    String    @id @default(cuid())
  url                   String    @unique
  verySuggestiveScore   Float
  suggestiveScore       Float
  mildlySuggestiveScore Float
  Message               Message[]
}

enum MessageType {
  text
  picture
}
